<Card Color="CardColor.Light" Style="width:40rem;margin:10px">
	<CardBody>
		<div class="mb-3">
			<label for="questionnaireName" class="form-label">Название опроса:</label>
			<InputText class="form-control" id="questionnaireName" @bind-Value="_Questionnaire.Name"></InputText>
		</div>

		<div class="mb-3">
			<label for="questionnaireState" class="form-label">Состояние опроса:</label>
			<InputSelect class="form-control" id="questionnaireState" @bind-Value="_Questionnaire.State">
				@foreach (QuestionnaireState option in Enum.GetValues(typeof(QuestionnaireState)))
				{
					<option checked="@(_Questionnaire.State == option)"
							value="@option">
						@option
					</option>
				}
			</InputSelect>
		</div>

		<CardText>
			<div class="mb-3">
				<label for="questionnaireDescription" class="form-label">Описание опроса:</label>
				<InputTextArea class="form-control" id="questionnaireDescription" rows="3" @bind-Value="_Questionnaire.Description"></InputTextArea>
			</div>
		</CardText>
	</CardBody>
</Card>
<div>
	@for(int i = 0; i < _Questionnaire.Questions.Count(); i++)
	{
		var iCopy = i;

		<QuestionComponent _Question="_Questionnaire.Questions.ElementAt(iCopy)" OnQuestionDelete="DeleteQuestion" OnQuestionChanged="ChangeQuestion"></QuestionComponent>
	}
</div>


@code {
	[CascadingParameter]
	public Questionnaire _Questionnaire { get; set; }

	[SupplyParameterFromForm]
	private Questionnaire ExportQuestionnaire { get; set; }

	private void Submit()
	{

	}

	private void DeleteQuestion(string questionId)
	{
		var questionToRemove = _Questionnaire.Questions.Where(q => q.Id == questionId).First();

		if(questionToRemove != null)
		{
			_Questionnaire.Questions.Remove(questionToRemove);
		}
	}

	private void ChangeQuestion(Question question)
	{
		var index = _Questionnaire.Questions.FindIndex(q => q.Id == question.Id);
		if (index != -1)
		{
			_Questionnaire.Questions[index] = question;
		}
	}
}
