
<Card Style="width:40rem;margin:10px">
    <CardBody>
        <CardSubTitle Class="mb-2 text-muted">Тип: @_Question.Type</CardSubTitle>

        <div class="mb-3">
            <label for="exampleFormControlTextarea1" class="form-label">Вопрос</label>
            <InputTextArea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind-Value="@QuestionText"></InputTextArea>
        </div>

        <div class="form-check form-switch">
            <InputCheckbox class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" @bind-Value="@IsOptional"></InputCheckbox>
            <label class="form-check-label" for="flexSwitchCheckDefault">@(IsOptional ? "Вопрос обязательный" : "Вопрос не обязательный")</label>
        </div>

        @switch (_Question.Type)
        {
            case QuestionType.MultipleSelect:
                <div>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleMultipleSelectAsync">
                        Ввести варианты ответов <Icon Name="IconName.ChevronDown"></Icon>
                    </Button>

                    <Collapse @ref="MultipleSelectColapse" Class="mt-3">
                        @for(int i = 0; i < Options.Count(); i++)
                        {
                            var iCopy = i;

                            <div style="display: flex">
                                <InputText class="form-control" Style="margin:10px 5px 10px 0" @bind-Value="@Options[iCopy]">@Options[iCopy]</InputText>
                                <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" style="margin:10px 0" @onclick="() => DeleteOption(Options[iCopy])">
                                    <Icon Name="IconName.XLg"></Icon>
                                </Button>
                            </div>
                        }
                        <Button Type="ButtonType.Button" Color="ButtonColor.Success" @onclick="AddOption">
                            Добавить <Icon Name="IconName.PlusLg"></Icon>
                        </Button>
                    </Collapse>
                </div>
                break;
            case QuestionType.Select:
                <div>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleSelectAsync">
                        Ввести варианты ответов <Icon Name="IconName.ChevronDown"></Icon>
                    </Button>

                    <Collapse @ref="SelectColapse" Class="mt-3">
                        @for (int i = 0; i < Options.Count(); i++)
                        {
                            var iCopy = i;

                            <div style="display: flex">
                                <InputText class="form-control" Style="margin:10px 5px 10px 0" @bind-Value="@Options[iCopy]">@Options[iCopy]</InputText>
                                <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" style="margin:10px 0" @onclick="() => DeleteOption(Options[iCopy])">
                                    <Icon Name="IconName.XLg"></Icon>
                                </Button>
                            </div>
                        }
                        <Button Type="ButtonType.Button" Color="ButtonColor.Success" @onclick="AddOption">
                            Добавить <Icon Name="IconName.PlusLg"></Icon>
                        </Button>
                    </Collapse>

                </div>
                break;
            case QuestionType.IntRange:
                <div>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleIntRangeAsync">
                        Ввести границы диапазона <Icon Name="IconName.ChevronDown"></Icon>
                    </Button>

                    <Collapse @ref="IntRangeColapse" Class="mt-3">
                        <div class="mb-3">
                            <NumberInput TValue="int" @bind-Value="@From" Placeholder="Введите минимальное значение" />
                            <span class="form-text">Минимальное значение.</span>
                        </div>

                        <div class="mb-3">
                            <NumberInput TValue="int" @bind-Value="@To" Placeholder="Введите максимальное значение" />
                            <span class="form-text">Максимальное значение.</span>
                        </div>
                    </Collapse>
                </div>
                break;
            default:
                break;
        }

        <div style="float: right">
            <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="DeleteQuestion">
                Удалить вопрос <Icon Name="IconName.XLg"></Icon>
            </Button>
        </div>
    </CardBody>
</Card>

@code {

    [Parameter]
    public Question _Question { get; set; }

    // private Question ExportQuestion { get; set; }

    private string QuestionText { get; set; }
    private bool IsOptional { get; set; }

    private List<string> Options { get; set; }

    private int From { get; set; }
    private int To { get; set; }

    protected override async Task OnInitializedAsync()
    {
        QuestionText = _Question.QuestionText;
        IsOptional = _Question.IsOptional;

        switch (_Question.Type)
        {
            case QuestionType.Text:
                // ExportQuestion = new QuestionText();
                break;
            case QuestionType.Checkbox:
                // ExportQuestion = new QuestionCheckbox();
                break;
            case QuestionType.MultipleSelect:
                // ExportQuestion = new QuestionMultipleSelect();
                Options = ((QuestionMultipleSelect)_Question).Options;
                break;
            case QuestionType.Select:
                // ExportQuestion = new QuestionSelect();
                Options = ((QuestionSelect)_Question).Options;
                break;

            case QuestionType.IntRange:
                // ExportQuestion = new QuestionIntRange();
                From = ((QuestionIntRange)_Question).Limits.From;
                To = ((QuestionIntRange)_Question).Limits.To;
                break;

            default:
                break;
        }
    }

    Collapse MultipleSelectColapse = default!;
    private async Task ToggleMultipleSelectAsync() => await MultipleSelectColapse.ToggleAsync();

    Collapse SelectColapse = default!;
    private async Task ToggleSelectAsync() => await SelectColapse.ToggleAsync();

    Collapse IntRangeColapse = default!;
    private async Task ToggleIntRangeAsync() => await IntRangeColapse.ToggleAsync();

    private async Task AddOption()
    {
        await Task.Run(() => { Options.Add("..."); });
    }

    private async Task DeleteOption(string option)
    {
        await Task.Run(() => { Options.Remove(option); });
    }

    [Parameter]
    public EventCallback<string> OnClickCallback { get; set; }

    private async Task DeleteQuestion()
    {
        await OnClickCallback.InvokeAsync(_Question.Id);
    }
}
