
<Card Style="width:40rem;margin:10px">
    <CardBody>
        <CardSubTitle Class="mb-2 text-muted">Тип: @_Question.Type</CardSubTitle>
        <div class="mb-3">
            <label for="exampleFormControlTextarea1" class="form-label">Вопрос</label>
            <InputTextArea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind-Value="@QuestionText"></InputTextArea>
        </div>
        <div class="form-check form-switch">
            <InputCheckbox class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" @bind-Value="@IsOptional"></InputCheckbox>
            <label class="form-check-label" for="flexSwitchCheckDefault">@(IsOptional ? "Вопрос обязательный" : "Вопрос не обязательный")</label>
        </div>

        @switch (_Question.Type)
        {
            case QuestionType.MultipleSelect:
                <Alert Color="AlertColor.Secondary">
                    Введите варианты ответов на вопрос.
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleMultipleSelectAsync">Ответы</Button>
                </Alert>
                <Collapse @ref="MultipleSelectColapse" Class="mt-3">
                    @for(int i = 0; i <Options.Count(); i++)
                    {
                        <InputText class="form-control" Style="margin-top:10px;margin-bottom:10px" @bind-Value="@Options[i]">@Options[i]</InputText>
                    }
                </Collapse>
                break;
            case QuestionType.Select:
                <Alert Color="AlertColor.Secondary">
                    Введите варианты ответов на вопрос.
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleSelectAsync">Ответы</Button>
                </Alert>
                <Collapse @ref="SelectColapse" Class="mt-3">
                    @for (int i = 0; i < Options.Count(); i++)
                    {
                        <InputText class="form-control" Style="margin-top:10px;margin-bottom:10px" @bind-Value="@Options[i]">@Options[i]</InputText>
                    }
                </Collapse>
                break;

            case QuestionType.IntRange:
                <Alert Color="AlertColor.Secondary">
                    Введите границы диапазона для ответа на вопрос.
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleIntRangeAsync">Границы диапазона</Button>
                </Alert>
                <Collapse @ref="IntRangeColapse" Class="mt-3">

                    <div class="mb-3">
                        <NumberInput TValue="int" @bind-Value="@From" Placeholder="Введите минимальное значение" />
                        <span class="form-text">Минимальное значение.</span>
                    </div>

                    <div class="mb-3">
                        <NumberInput TValue="int" @bind-Value="@To" Placeholder="Введите максимальное значение" />
                        <span class="form-text">Максимальное значение.</span>
                    </div>
                </Collapse>
                break;
                
            default:
                break;
        }
    </CardBody>
</Card>

@code {

    [Parameter]
    public Question _Question { get; set; }

    private Question ExportQuestion { get; set; }

    private string QuestionText { get; set; }
    private bool IsOptional { get; set; }

    private List<string> Options { get; set; }

    private int From { get; set; }
    private int To { get; set; }

    protected override async Task OnInitializedAsync()
    {
        QuestionText = _Question.QuestionText;
        IsOptional = _Question.IsOptional;

        switch (_Question.Type)
        {
            case QuestionType.Text:
                ExportQuestion = new QuestionText();
                break;
            case QuestionType.Checkbox:
                ExportQuestion = new QuestionCheckbox();
                break;
            case QuestionType.MultipleSelect:
                ExportQuestion = new QuestionMultipleSelect();
                Options = ((QuestionMultipleSelect)_Question).Options;
                break;
            case QuestionType.Select:
                ExportQuestion = new QuestionSelect();
                Options = ((QuestionSelect)_Question).Options;
                break;

            case QuestionType.IntRange:
                ExportQuestion = new QuestionIntRange();
                From = ((QuestionIntRange)_Question).Limits.From;
                To = ((QuestionIntRange)_Question).Limits.To;
                break;
                
            default:
                break;
        }
    }

    Collapse MultipleSelectColapse = default!;
    private async Task ToggleMultipleSelectAsync() => await MultipleSelectColapse.ToggleAsync();

    Collapse SelectColapse = default!;
    private async Task ToggleSelectAsync() => await SelectColapse.ToggleAsync();

    Collapse IntRangeColapse = default!;
    private async Task ToggleIntRangeAsync() => await IntRangeColapse.ToggleAsync();
}
